#!/usr/bin/env zsh

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$DEVHOME/ohmyzsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git helm kubectl poetry)

source $ZSH/oh-my-zsh.sh

# JAR configuration

# functions:
pathprepend() {
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        PATH="$1:${PATH:+"$PATH"}"
    fi
}

export LSCOLORS=Exfxcxdxcxegedabageced  # https://hdevstudy.tistory.com/52

# PATH:
# export PATH=~/opt:~/opt/bat:~/opt/nvim/bin:$PATH
pathprepend ~/.local/share/npm/bin
pathprepend ~/opt/nvim/bin
pathprepend ~/opt/bat
pathprepend ~/opt

setopt autopushd    # cd automatically pushes old dir onto dir stack
setopt pushd_ignore_dups # don't push multiple copies of the same directory onto the directory stack

setopt CDABLE_VARS  # expand the expression (allows 'cd -2/tmp')

# shell history:
export SAVEHIST=1000000         # No of cmds stored in hist file
export HISTSIZE=50000             # No of cmds loaded into RAM from hist file
export HISTFILE=$HOME/.zsh_history
setopt INC_APPEND_HISTORY       # cmds are added to the history immediately

# export LANG=en_GB.UTF-8
# export LANGUAGE=en_GB.UTF-8
# export LC_ALL=en_GB.UTF-8
# export LC_CTYPE=en_GB.UTF-8 # to avoid the error message "grep: invalid UTF-8 byte sequence in input" when using grep -P.

# shell editor:
export EDITOR=nvim
export VISUAL=nvim

# Python, poetry
export POETRY_VIRTUALENVS_IN_PROJECT=true
# export PYTHONBREAKPOINT=ipdb.set_trace
export PYTHONBREAKPOINT=IPython.terminal.debugger.set_trace

# nvm setup:
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# home/ end keys:
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line
bindkey "^[[1;3C" forward-word
bindkey "^[[1;3D" backward-word

# Load version control information
autoload -Uz vcs_info
precmd() { vcs_info }

# Format the vcs_info_msg_0_ variable
zstyle ':vcs_info:git:*' formats '%F{9}%b%f'
 
# Set up the prompt (with git branch name)
setopt PROMPT_SUBST
NEWLINE=$'\n'
# PROMPT='%(?.%F{green}âœ”.%F{red}%?)%f %F{2}%n @ %m%f %F{14}${PWD/#$HOME/~}%f ${vcs_info_msg_0_}${NEWLINE}\$ '
# RPROMPT='$(python3 -c "import sys; print(sys.executable)") - $(python3 -V)'

cd_func() {
  local x2 the_new_dir adir index
  local -i cnt

  if [[ $1 ==  "--" ]]; then
    dirs -v
    return 0
  fi
  the_new_dir=$1
  [[ -z $1 ]] && the_new_dir=$HOME

  if [[ ${the_new_dir:0:1} == '-' ]]; then
    index=${the_new_dir:1}
    [[ -z $index ]] && index=1
    adir=$(dirs +$index)
    [[ -z $adir ]] && return 1
    the_new_dir=$adir
  fi
  #
  # '~' has to be substituted by ${HOME}
  [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

  # Now change to the new dir and add to the top of the stack
  pushd "${the_new_dir}" > /dev/null
  [[ $? -ne 0 ]] && return 1
  the_new_dir=$(pwd)
  # Trim down everything beyond 11th entry
  popd -n +11 2>/dev/null 1>/dev/null
  # Remove any other occurence of this dir, skipping the top of the stack
  for ((cnt=1; cnt <= 10; cnt++)); do
    x2=$(dirs +${cnt} 2>/dev/null)
    [[ $? -ne 0 ]] && return 0
    [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
    if [[ "${x2}" == "${the_new_dir}" ]]; then
      popd -n +$cnt 2>/dev/null 1>/dev/null
      cnt=cnt-1
    fi
  done
  return 0
}
alias cd=cd_func

cleanpy_func() {
  find $PWD -depth -type d -name '__pycache__' -exec rm -Rf {} \;
  find $PWD -depth -type f -name '*.pyc' -exec rm -f {} \;
}

update_working_times() {
  CWD=`pwd`;
  cd ~/repos/finances;
  PYTHONPATH=~/repos/jar python3 -m finances update-working-times;
  cd $CWD;
}
alias wt='update_working_times'

alias ls='ls --color'
alias l='ls -lh'    # h makes sizes human-readable
alias ll='ls -lha'  # a shows dot files

# dirs:
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias ccm='cd ~/repos/capella-collab-manager'
alias cds='cd ~/repos/capella-diagram-service'
alias ck='cd $DEVHOME/kitty'
alias cn='cd $DEVHOME/nvim'
alias dev='cd $DEVHOME'
alias edit='cd ~/repos/capella-dockerimages/capella_broken_desc_editor'
alias f='cd ~/repos/finances'
alias jar='cd ~/repos/jar'
alias mdd='cd ~/repos/mddocgen'
alias myd='cd ~/mydrive'
alias r='cd ~/repos'
alias tmp='cd ~/tmp'

# git:
alias add='git add'
alias checkout='git checkout'
alias commit='git commit'
alias gitdiff='git difftool --no-symlinks'
alias gitdiffdir='git difftool --no-symlinks --dir-diff'
alias gitreset='git checkout -- .; git reset --hard HEAD; git clean -d --force'
alias pull='git pull'
alias push='git push'
alias st='git status .'
alias up='git add .; git commit -m "WIP"; git push'

# tools:
alias actpoetry='source $(poetry env info -p)/bin/activate'
alias grep='grep --color --exclude-dir=.git --exclude-dir=.svn'
alias ipython='ipython --profile jar'
# alias ipython='ipython --logfile=~/ipython_log.py'

# export JARVIMDIR=$HOME/repos/jarvim
alias vd='NVIM_LISTEN_ADDRESS=/tmp/nvim nvim'
# alias vi='nvim'
alias vis='nvim -S'
alias vidiff='nvim -d'
# alias viprofile='export FILEPATH=$HOME/repos/profile_nvim/data/logs/$(date +%s).log; vi --startuptime $FILEPATH -c"e $FILEPATH" -c"PackerProfile" -c"wincmd w"'
alias vi='export FILEPATH=$HOME/repos/profile_nvim/data/logs/$(date +%Y%m%d_%H%M%S_%s).log; nvim --startuptime $FILEPATH'

# fzf:
FZF_DEFAULT_OPTS='--history-size=10000'
alias fd='FZF_DEFAULT_COMMAND="find . -type d" fzf'
alias ff='FZF_DEFAULT_COMMAND="find . -type f" fzf --preview "bat --style=numbers --color=always --line-range :500 {}"'
alias vf='FZF_DEFAULT_COMMAND=find . -type f | grep -v .git; nvim $(fzf --preview "bat --style=numbers --color=always --line-range :500 {}"); unset FZF_DEFAULT_COMMAND'

# misc:
alias attr='sudo xattr -rds com.apple.quarantine'
alias cl='clear'
alias cleanpy='cleanpy_func'
alias doc="nvim -c 'MarkdownPreview' $DEVHOME/JARDOC.md"
alias ewt='nvim $HOME/repos/finances/data/working_times.csv'
alias init="nvim -c'e ~/.config/nvim/init.vim'"
alias pslong='ps -eo pid,nice,user,command'
alias psshort='ps -eo pid,nice,user,comm'
alias src='source $HOME/.zshrc'
alias termcolors='for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+"\n"}; done'

if [[ -n $TERM ]] && [[ $TERM == "xterm-kitty" ]]; then
    alias ssh='kitty +kitten ssh'
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh  # installed by: $ ~/opt/fzf/install

# zstyle ':completion:*:*:git:*' script ~/.zsh/git-completion.bash
autoload -Uz compinit && compinit

fpath=(~/.zsh $fpath)

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh

if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
